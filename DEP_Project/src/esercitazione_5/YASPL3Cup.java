
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione_5;

import SyntaxTree.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class YASPL3Cup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return YASPL3Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public YASPL3Cup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public YASPL3Cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public YASPL3Cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\006\000\002\002\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\002\000\002\024\004" +
    "\000\002\024\004\000\002\024\002\000\002\004\004\000" +
    "\002\004\002\000\002\025\004\000\002\025\002\000\002" +
    "\007\005\000\002\007\010\000\002\007\010\000\002\033" +
    "\006\000\002\033\011\000\002\033\002\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\014\005\000\002\015\006\000\002" +
    "\015\002\000\002\016\004\000\002\016\002\000\002\012" +
    "\004\000\002\026\005\000\002\026\002\000\002\003\010" +
    "\000\002\003\007\000\002\010\004\000\002\010\002\000" +
    "\002\027\004\000\002\027\002\000\002\011\006\000\002" +
    "\030\007\000\002\030\002\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\006\006\000\002\013\005" +
    "\000\002\013\005\000\002\013\006\000\002\013\007\000" +
    "\002\013\006\000\002\013\012\000\002\013\010\000\002" +
    "\013\010\000\002\013\017\000\002\013\006\000\002\013" +
    "\006\000\002\013\011\000\002\013\011\000\002\013\014" +
    "\000\002\032\012\000\002\032\010\000\002\032\002\000" +
    "\002\023\004\000\002\031\005\000\002\031\002\000\002" +
    "\022\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\004\000\002\017\004\000\002\017\005\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\004\004\005\001\002\000\004\002\341\001" +
    "\002\000\022\005\ufffd\006\007\007\010\010\014\011\013" +
    "\012\020\013\017\025\011\001\002\000\004\071\333\001" +
    "\002\000\004\071\uffef\001\002\000\004\071\uffee\001\002" +
    "\000\004\071\303\001\002\000\022\005\ufffa\006\007\007" +
    "\010\010\014\011\013\012\020\013\017\025\011\001\002" +
    "\000\004\071\uffec\001\002\000\004\071\uffed\001\002\000" +
    "\022\005\ufffa\006\007\007\010\010\014\011\013\012\020" +
    "\013\017\025\011\001\002\000\004\005\273\001\002\000" +
    "\004\071\021\001\002\000\004\071\uffeb\001\002\000\004" +
    "\037\022\001\002\000\012\040\030\060\025\061\024\062" +
    "\026\001\002\000\014\006\007\007\010\010\014\011\013" +
    "\012\020\001\002\000\014\006\uffd8\007\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\001\002\000\014\006\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\001\002\000\014\006\uffd7\007\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\001\002\000\004\040\261\001\002" +
    "\000\004\041\031\001\002\000\056\006\007\007\010\010" +
    "\014\011\013\012\020\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\020\uffdf\023\uffdf\025\011\026\uffdf\037\uffdf\042\uffdf\044" +
    "\uffdf\054\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\071\uffdf" +
    "\001\002\000\022\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\025\uffe1\001\002\000\042\013\055" +
    "\014\047\015\056\016\051\020\043\023\061\026\046\037" +
    "\062\042\ufff8\044\057\054\044\063\054\064\042\065\063" +
    "\066\040\071\053\001\002\000\060\006\007\007\010\010" +
    "\014\011\013\012\020\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\020\uffdd\023\uffdd\025\011\026\uffdd\031\uffdd\037\uffdd\042" +
    "\uffdd\044\uffdd\054\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd" +
    "\071\uffdd\001\002\000\044\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\020\uffe0\023\uffe0\026\uffe0\031\uffe0\037\uffe0\042\uffe0" +
    "\044\uffe0\054\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\071" +
    "\uffe0\001\002\000\060\006\007\007\010\010\014\011\013" +
    "\012\020\013\uffdd\014\uffdd\015\uffdd\016\uffdd\020\uffdd\023" +
    "\uffdd\025\011\026\uffdd\031\uffdd\037\uffdd\042\uffdd\044\uffdd" +
    "\054\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\071\uffdd\001" +
    "\002\000\044\013\uffde\014\uffde\015\uffde\016\uffde\020\uffde" +
    "\023\uffde\026\uffde\031\uffde\037\uffde\042\uffde\044\uffde\054" +
    "\uffde\063\uffde\064\uffde\065\uffde\066\uffde\071\uffde\001\002" +
    "\000\046\024\uffac\030\uffac\034\uffac\035\uffac\036\uffac\040" +
    "\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac" +
    "\051\uffac\052\uffac\053\uffac\055\uffac\056\uffac\070\uffac\001" +
    "\002\000\046\002\ufff6\013\055\014\047\015\056\016\051" +
    "\020\043\023\061\026\046\031\ufff6\037\062\042\ufff6\044" +
    "\057\054\044\063\054\064\042\065\063\066\040\071\053" +
    "\001\002\000\046\024\uffad\030\uffad\034\uffad\035\uffad\036" +
    "\uffad\040\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad" +
    "\050\uffad\051\uffad\052\uffad\053\uffad\055\uffad\056\uffad\070" +
    "\uffad\001\002\000\004\037\251\001\002\000\026\014\047" +
    "\015\056\037\062\044\057\054\044\063\054\064\042\065" +
    "\063\066\040\071\065\001\002\000\004\042\247\001\002" +
    "\000\004\037\223\001\002\000\046\024\uffb1\030\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\040\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\055" +
    "\uffb1\056\uffb1\070\uffb1\001\002\000\004\070\221\001\002" +
    "\000\004\037\207\001\002\000\040\024\074\036\204\040" +
    "\uffc2\043\075\044\071\045\102\046\101\047\100\050\073" +
    "\051\104\052\077\053\076\055\072\056\105\070\uffc2\001" +
    "\002\000\046\024\uffaf\033\155\036\152\037\154\043\153" +
    "\044\156\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052" +
    "\uffaf\053\uffaf\055\uffaf\056\uffaf\057\160\067\uffe3\070\uffaf" +
    "\001\002\000\046\024\uffae\030\uffae\034\uffae\035\uffae\036" +
    "\uffae\040\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae" +
    "\050\uffae\051\uffae\052\uffae\053\uffae\055\uffae\056\uffae\070" +
    "\uffae\001\002\000\004\071\141\001\002\000\046\024\uffb0" +
    "\030\uffb0\034\uffb0\035\uffb0\036\uffb0\040\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\055\uffb0\056\uffb0\070\uffb0\001\002\000\026\014" +
    "\047\015\056\037\062\044\057\054\044\063\054\064\042" +
    "\065\063\066\040\071\065\001\002\000\004\067\136\001" +
    "\002\000\004\037\122\001\002\000\026\014\047\015\056" +
    "\037\062\044\057\054\044\063\054\064\042\065\063\066" +
    "\040\071\065\001\002\000\046\024\uffab\030\uffab\034\uffab" +
    "\035\uffab\036\uffab\040\uffab\043\uffab\044\uffab\045\uffab\046" +
    "\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\055\uffab" +
    "\056\uffab\070\uffab\001\002\000\034\024\074\040\103\043" +
    "\075\044\071\045\102\046\101\047\100\050\073\051\104" +
    "\052\077\053\076\055\072\056\105\001\002\000\050\024" +
    "\uffaf\030\uffaf\033\066\034\uffaf\035\uffaf\036\uffaf\040\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051" +
    "\uffaf\052\uffaf\053\uffaf\055\uffaf\056\uffaf\070\uffaf\001\002" +
    "\000\004\063\067\001\002\000\004\034\070\001\002\000" +
    "\046\024\uffaa\030\uffaa\034\uffaa\035\uffaa\036\uffaa\040\uffaa" +
    "\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051" +
    "\uffaa\052\uffaa\053\uffaa\055\uffaa\056\uffaa\070\uffaa\001\002" +
    "\000\026\014\047\015\056\037\062\044\057\054\044\063" +
    "\054\064\042\065\063\066\040\071\065\001\002\000\026" +
    "\014\047\015\056\037\062\044\057\054\044\063\054\064" +
    "\042\065\063\066\040\071\065\001\002\000\026\014\047" +
    "\015\056\037\062\044\057\054\044\063\054\064\042\065" +
    "\063\066\040\071\065\001\002\000\026\014\047\015\056" +
    "\037\062\044\057\054\044\063\054\064\042\065\063\066" +
    "\040\071\065\001\002\000\026\014\047\015\056\037\062" +
    "\044\057\054\044\063\054\064\042\065\063\066\040\071" +
    "\065\001\002\000\026\014\047\015\056\037\062\044\057" +
    "\054\044\063\054\064\042\065\063\066\040\071\065\001" +
    "\002\000\026\014\047\015\056\037\062\044\057\054\044" +
    "\063\054\064\042\065\063\066\040\071\065\001\002\000" +
    "\026\014\047\015\056\037\062\044\057\054\044\063\054" +
    "\064\042\065\063\066\040\071\065\001\002\000\026\014" +
    "\047\015\056\037\062\044\057\054\044\063\054\064\042" +
    "\065\063\066\040\071\065\001\002\000\026\014\047\015" +
    "\056\037\062\044\057\054\044\063\054\064\042\065\063" +
    "\066\040\071\065\001\002\000\046\024\uffb2\030\uffb2\034" +
    "\uffb2\035\uffb2\036\uffb2\040\uffb2\043\uffb2\044\uffb2\045\uffb2" +
    "\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\055" +
    "\uffb2\056\uffb2\070\uffb2\001\002\000\026\014\047\015\056" +
    "\037\062\044\057\054\044\063\054\064\042\065\063\066" +
    "\040\071\065\001\002\000\026\014\047\015\056\037\062" +
    "\044\057\054\044\063\054\064\042\065\063\066\040\071" +
    "\065\001\002\000\046\024\074\030\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\040\uffbb\043\uffbb\044\uffbb\045\102\046\101\047" +
    "\100\050\073\051\104\052\077\053\076\055\072\056\uffbb" +
    "\070\uffbb\001\002\000\032\030\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\040\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\055\uffb9" +
    "\056\uffb9\070\uffb9\001\002\000\046\024\074\030\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\040\uffbe\043\uffbe\044\uffbe\045\uffbe" +
    "\046\uffbe\047\100\050\073\051\104\052\077\053\076\055" +
    "\uffbe\056\uffbe\070\uffbe\001\002\000\046\024\074\030\uffbd" +
    "\034\uffbd\035\uffbd\036\uffbd\040\uffbd\043\uffbd\044\uffbd\045" +
    "\uffbd\046\uffbd\047\100\050\073\051\104\052\077\053\076" +
    "\055\uffbd\056\uffbd\070\uffbd\001\002\000\032\030\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\040\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\055\uffb6\056\uffb6\070\uffb6\001\002\000\032\030" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\040\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\055\uffb8\056\uffb8\070\uffb8\001\002\000" +
    "\032\030\uffb7\034\uffb7\035\uffb7\036\uffb7\040\uffb7\043\uffb7" +
    "\044\uffb7\045\uffb7\046\uffb7\055\uffb7\056\uffb7\070\uffb7\001" +
    "\002\000\046\024\074\030\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\040\uffc0\043\uffc0\044\uffc0\045\102\046\101\047\100\050" +
    "\073\051\104\052\077\053\076\055\072\056\uffc0\070\uffc0" +
    "\001\002\000\032\030\uffb5\034\uffb5\035\uffb5\036\uffb5\040" +
    "\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\055\uffb5\056\uffb5" +
    "\070\uffb5\001\002\000\032\030\uffba\034\uffba\035\uffba\036" +
    "\uffba\040\uffba\043\uffba\044\uffba\045\uffba\046\uffba\055\uffba" +
    "\056\uffba\070\uffba\001\002\000\046\024\074\030\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\040\uffbc\043\uffbc\044\uffbc\045\uffbc" +
    "\046\uffbc\047\100\050\073\051\104\052\077\053\076\055" +
    "\uffbc\056\uffbc\070\uffbc\001\002\000\046\024\074\030\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\040\uffbf\043\uffbf\044\uffbf\045" +
    "\102\046\101\047\100\050\073\051\104\052\077\053\076" +
    "\055\072\056\uffbf\070\uffbf\001\002\000\004\071\123\001" +
    "\002\000\004\057\124\001\002\000\026\014\047\015\056" +
    "\037\062\044\057\054\044\063\054\064\042\065\063\066" +
    "\040\071\065\001\002\000\034\024\074\035\126\043\075" +
    "\044\071\045\102\046\101\047\100\050\073\051\104\052" +
    "\077\053\076\055\072\056\105\001\002\000\026\014\047" +
    "\015\056\037\062\044\057\054\044\063\054\064\042\065" +
    "\063\066\040\071\065\001\002\000\034\024\074\035\130" +
    "\043\075\044\071\045\102\046\101\047\100\050\073\051" +
    "\104\052\077\053\076\055\072\056\105\001\002\000\004" +
    "\071\131\001\002\000\004\057\132\001\002\000\026\014" +
    "\047\015\056\037\062\044\057\054\044\063\054\064\042" +
    "\065\063\066\040\071\065\001\002\000\034\024\074\040" +
    "\134\043\075\044\071\045\102\046\101\047\100\050\073" +
    "\051\104\052\077\053\076\055\072\056\105\001\002\000" +
    "\004\041\031\001\002\000\046\002\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\020\uffcd\023\uffcd\026\uffcd\031\uffcd\037" +
    "\uffcd\042\uffcd\044\uffcd\054\uffcd\063\uffcd\064\uffcd\065\uffcd" +
    "\066\uffcd\071\uffcd\001\002\000\004\035\137\001\002\000" +
    "\046\002\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5" +
    "\023\uffd5\026\uffd5\031\uffd5\037\uffd5\042\uffd5\044\uffd5\054" +
    "\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\071\uffd5\001\002" +
    "\000\046\024\uffb4\030\uffb4\034\uffb4\035\uffb4\036\uffb4\040" +
    "\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\055\uffb4\056\uffb4\070\uffb4\001" +
    "\002\000\004\037\142\001\002\000\010\060\025\061\024" +
    "\062\026\001\002\000\004\040\144\001\002\000\004\041" +
    "\145\001\002\000\056\006\007\007\010\010\014\011\013" +
    "\012\020\013\uffdf\014\uffdf\015\uffdf\016\uffdf\020\uffdf\023" +
    "\uffdf\025\011\026\uffdf\037\uffdf\042\uffdf\044\uffdf\054\uffdf" +
    "\063\uffdf\064\uffdf\065\uffdf\066\uffdf\071\uffdf\001\002\000" +
    "\042\013\055\014\047\015\056\016\051\020\043\023\061" +
    "\026\046\037\062\042\ufff8\044\057\054\044\063\054\064" +
    "\042\065\063\066\040\071\053\001\002\000\004\042\150" +
    "\001\002\000\004\035\151\001\002\000\046\002\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\020\uffc8\023\uffc8\026\uffc8" +
    "\031\uffc8\037\uffc8\042\uffc8\044\uffc8\054\uffc8\063\uffc8\064" +
    "\uffc8\065\uffc8\066\uffc8\071\uffc8\001\002\000\004\071\201" +
    "\001\002\000\004\043\177\001\002\000\030\014\047\015" +
    "\056\037\062\040\172\044\057\054\044\063\054\064\042" +
    "\065\063\066\040\071\065\001\002\000\004\063\165\001" +
    "\002\000\004\044\163\001\002\000\004\067\uffe5\001\002" +
    "\000\026\014\047\015\056\037\062\044\057\054\044\063" +
    "\054\064\042\065\063\066\040\071\065\001\002\000\034" +
    "\024\074\035\162\043\075\044\071\045\102\046\101\047" +
    "\100\050\073\051\104\052\077\053\076\055\072\056\105" +
    "\001\002\000\046\002\uffd3\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\020\uffd3\023\uffd3\026\uffd3\031\uffd3\037\uffd3\042\uffd3" +
    "\044\uffd3\054\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\071" +
    "\uffd3\001\002\000\004\035\164\001\002\000\046\002\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\016\uffcb\020\uffcb\023\uffcb\026" +
    "\uffcb\031\uffcb\037\uffcb\042\uffcb\044\uffcb\054\uffcb\063\uffcb" +
    "\064\uffcb\065\uffcb\066\uffcb\071\uffcb\001\002\000\004\034" +
    "\166\001\002\000\040\024\uffaa\036\uffaa\043\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\055\uffaa\056\uffaa\057\167\070\uffaa\001\002\000\026" +
    "\014\047\015\056\037\062\044\057\054\044\063\054\064" +
    "\042\065\063\066\040\071\065\001\002\000\034\024\074" +
    "\035\171\043\075\044\071\045\102\046\101\047\100\050" +
    "\073\051\104\052\077\053\076\055\072\056\105\001\002" +
    "\000\046\002\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\020" +
    "\uffc9\023\uffc9\026\uffc9\031\uffc9\037\uffc9\042\uffc9\044\uffc9" +
    "\054\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\071\uffc9\001" +
    "\002\000\004\035\176\001\002\000\004\040\174\001\002" +
    "\000\004\035\175\001\002\000\046\002\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\020\uffd2\023\uffd2\026\uffd2\031\uffd2" +
    "\037\uffd2\042\uffd2\044\uffd2\054\uffd2\063\uffd2\064\uffd2\065" +
    "\uffd2\066\uffd2\071\uffd2\001\002\000\046\002\uffd1\013\uffd1" +
    "\014\uffd1\015\uffd1\016\uffd1\020\uffd1\023\uffd1\026\uffd1\031" +
    "\uffd1\037\uffd1\042\uffd1\044\uffd1\054\uffd1\063\uffd1\064\uffd1" +
    "\065\uffd1\066\uffd1\071\uffd1\001\002\000\004\035\200\001" +
    "\002\000\046\002\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\020\uffcc\023\uffcc\026\uffcc\031\uffcc\037\uffcc\042\uffcc\044" +
    "\uffcc\054\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\071\uffcc" +
    "\001\002\000\006\036\152\067\uffe3\001\002\000\004\067" +
    "\uffe4\001\002\000\006\040\uffc4\070\uffc4\001\002\000\026" +
    "\014\047\015\056\037\062\044\057\054\044\063\054\064" +
    "\042\065\063\066\040\071\065\001\002\000\040\024\074" +
    "\036\204\040\uffc2\043\075\044\071\045\102\046\101\047" +
    "\100\050\073\051\104\052\077\053\076\055\072\056\105" +
    "\070\uffc2\001\002\000\006\040\uffc3\070\uffc3\001\002\000" +
    "\026\014\047\015\056\037\062\044\057\054\044\063\054" +
    "\064\042\065\063\066\040\071\065\001\002\000\034\024" +
    "\074\040\211\043\075\044\071\045\102\046\101\047\100" +
    "\050\073\051\104\052\077\053\076\055\072\056\105\001" +
    "\002\000\004\017\212\001\002\000\004\041\213\001\002" +
    "\000\042\013\055\014\047\015\056\016\051\020\043\023" +
    "\061\026\046\037\062\042\ufff8\044\057\054\044\063\054" +
    "\064\042\065\063\066\040\071\053\001\002\000\050\002" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\020\uffcf\022\215" +
    "\023\uffcf\026\uffcf\031\uffcf\037\uffcf\042\uffcf\044\uffcf\054" +
    "\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\071\uffcf\001\002" +
    "\000\004\041\213\001\002\000\046\002\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\020\uffd0\023\uffd0\026\uffd0\031\uffd0" +
    "\037\uffd0\042\uffd0\044\uffd0\054\uffd0\063\uffd0\064\uffd0\065" +
    "\uffd0\066\uffd0\071\uffd0\001\002\000\004\042\220\001\002" +
    "\000\050\002\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\020" +
    "\uffc1\022\uffc1\023\uffc1\026\uffc1\031\uffc1\037\uffc1\042\uffc1" +
    "\044\uffc1\054\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\071" +
    "\uffc1\001\002\000\004\035\222\001\002\000\046\002\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\020\uffd4\023\uffd4\026" +
    "\uffd4\031\uffd4\037\uffd4\042\uffd4\044\uffd4\054\uffd4\063\uffd4" +
    "\064\uffd4\065\uffd4\066\uffd4\071\uffd4\001\002\000\004\071" +
    "\224\001\002\000\004\040\225\001\002\000\004\041\226" +
    "\001\002\000\010\027\230\032\227\042\uffc5\001\002\000" +
    "\004\030\242\001\002\000\026\014\047\015\056\037\062" +
    "\044\057\054\044\063\054\064\042\065\063\066\040\071" +
    "\065\001\002\000\004\042\232\001\002\000\046\002\uffca" +
    "\013\uffca\014\uffca\015\uffca\016\uffca\020\uffca\023\uffca\026" +
    "\uffca\031\uffca\037\uffca\042\uffca\044\uffca\054\uffca\063\uffca" +
    "\064\uffca\065\uffca\066\uffca\071\uffca\001\002\000\034\024" +
    "\074\030\234\043\075\044\071\045\102\046\101\047\100" +
    "\050\073\051\104\052\077\053\076\055\072\056\105\001" +
    "\002\000\056\006\007\007\010\010\014\011\013\012\020" +
    "\013\uffdf\014\uffdf\015\uffdf\016\uffdf\020\uffdf\023\uffdf\025" +
    "\011\026\uffdf\031\uffdf\037\uffdf\044\uffdf\054\uffdf\063\uffdf" +
    "\064\uffdf\065\uffdf\066\uffdf\071\uffdf\001\002\000\042\013" +
    "\055\014\047\015\056\016\051\020\043\023\061\026\046" +
    "\031\ufff8\037\062\044\057\054\044\063\054\064\042\065" +
    "\063\066\040\071\053\001\002\000\004\031\237\001\002" +
    "\000\004\035\240\001\002\000\010\027\230\032\227\042" +
    "\uffc5\001\002\000\004\042\uffc7\001\002\000\056\006\007" +
    "\007\010\010\014\011\013\012\020\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\020\uffdf\023\uffdf\025\011\026\uffdf\031\uffdf" +
    "\037\uffdf\044\uffdf\054\uffdf\063\uffdf\064\uffdf\065\uffdf\066" +
    "\uffdf\071\uffdf\001\002\000\042\013\055\014\047\015\056" +
    "\016\051\020\043\023\061\026\046\031\ufff8\037\062\044" +
    "\057\054\044\063\054\064\042\065\063\066\040\071\053" +
    "\001\002\000\004\031\245\001\002\000\004\035\246\001" +
    "\002\000\004\042\uffc6\001\002\000\064\002\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\020\uffd6\023\uffd6\025\uffd6\026\uffd6" +
    "\031\uffd6\037\uffd6\042\uffd6\044\uffd6\054\uffd6\063\uffd6\064" +
    "\uffd6\065\uffd6\066\uffd6\071\uffd6\001\002\000\046\024\uffb3" +
    "\030\uffb3\034\uffb3\035\uffb3\036\uffb3\040\uffb3\043\uffb3\044" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\053\uffb3\055\uffb3\056\uffb3\070\uffb3\001\002\000\026\014" +
    "\047\015\056\037\062\044\057\054\044\063\054\064\042" +
    "\065\063\066\040\071\065\001\002\000\034\024\074\040" +
    "\253\043\075\044\071\045\102\046\101\047\100\050\073" +
    "\051\104\052\077\053\076\055\072\056\105\001\002\000" +
    "\004\021\254\001\002\000\004\041\213\001\002\000\046" +
    "\002\uffce\013\uffce\014\uffce\015\uffce\016\uffce\020\uffce\023" +
    "\uffce\026\uffce\031\uffce\037\uffce\042\uffce\044\uffce\054\uffce" +
    "\063\uffce\064\uffce\065\uffce\066\uffce\071\uffce\001\002\000" +
    "\046\002\ufff6\013\055\014\047\015\056\016\051\020\043" +
    "\023\061\026\046\031\ufff6\037\062\042\ufff6\044\057\054" +
    "\044\063\054\064\042\065\063\066\040\071\053\001\002" +
    "\000\010\002\ufff9\031\ufff9\042\ufff9\001\002\000\010\002" +
    "\ufff7\031\ufff7\042\ufff7\001\002\000\004\041\031\001\002" +
    "\000\022\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\025\uffe2\001\002\000\004\071\264\001\002" +
    "\000\006\036\266\040\uffda\001\002\000\004\040\uffdc\001" +
    "\002\000\010\060\025\061\024\062\026\001\002\000\014" +
    "\006\007\007\010\010\014\011\013\012\020\001\002\000" +
    "\004\071\271\001\002\000\006\036\266\040\uffda\001\002" +
    "\000\004\040\uffdb\001\002\000\042\002\ufff8\013\055\014" +
    "\047\015\056\016\051\020\043\023\061\026\046\037\062" +
    "\044\057\054\044\063\054\064\042\065\063\066\040\071" +
    "\053\001\002\000\004\002\001\001\002\000\004\005\uffff" +
    "\001\002\000\022\005\ufffa\006\007\007\010\010\014\011" +
    "\013\012\020\013\017\025\011\001\002\000\022\005\ufffa" +
    "\006\007\007\010\010\014\011\013\012\020\013\017\025" +
    "\011\001\002\000\004\005\ufffc\001\002\000\004\005\ufffb" +
    "\001\002\000\004\005\ufffe\001\002\000\004\041\304\001" +
    "\002\000\016\006\007\007\010\010\014\011\013\012\020" +
    "\042\ufff0\001\002\000\004\071\312\001\002\000\004\042" +
    "\307\001\002\000\004\035\310\001\002\000\062\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\016\ufff3\020\ufff3\023\ufff3\025\ufff3\026\ufff3" +
    "\031\ufff3\037\ufff3\042\ufff3\044\ufff3\054\ufff3\063\ufff3\064" +
    "\ufff3\065\ufff3\066\ufff3\071\ufff3\001\002\000\004\035\330" +
    "\001\002\000\012\033\314\035\uffe6\036\uffe6\057\315\001" +
    "\002\000\006\035\uffe8\036\323\001\002\000\026\014\047" +
    "\015\056\037\062\044\057\054\044\063\054\064\042\065" +
    "\063\066\040\071\065\001\002\000\026\014\047\015\056" +
    "\037\062\044\057\054\044\063\054\064\042\065\063\066" +
    "\040\071\065\001\002\000\036\024\074\035\uffe7\036\uffe7" +
    "\043\075\044\071\045\102\046\101\047\100\050\073\051" +
    "\104\052\077\053\076\055\072\056\105\001\002\000\034" +
    "\024\074\034\320\043\075\044\071\045\102\046\101\047" +
    "\100\050\073\051\104\052\077\053\076\055\072\056\105" +
    "\001\002\000\004\035\321\001\002\000\016\006\007\007" +
    "\010\010\014\011\013\012\020\042\ufff0\001\002\000\004" +
    "\042\ufff1\001\002\000\004\071\325\001\002\000\004\035" +
    "\uffea\001\002\000\010\035\uffe6\036\uffe6\057\315\001\002" +
    "\000\006\035\uffe8\036\323\001\002\000\004\035\uffe9\001" +
    "\002\000\016\006\007\007\010\010\014\011\013\012\020" +
    "\042\ufff0\001\002\000\004\042\ufff2\001\002\000\004\035" +
    "\340\001\002\000\012\033\334\035\uffe6\036\uffe6\057\315" +
    "\001\002\000\026\014\047\015\056\037\062\044\057\054" +
    "\044\063\054\064\042\065\063\066\040\071\065\001\002" +
    "\000\034\024\074\034\336\043\075\044\071\045\102\046" +
    "\101\047\100\050\073\051\104\052\077\053\076\055\072" +
    "\056\105\001\002\000\004\035\337\001\002\000\062\005" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\020\ufff4\023\ufff4\025\ufff4\026" +
    "\ufff4\031\ufff4\037\ufff4\042\ufff4\044\ufff4\054\ufff4\063\ufff4" +
    "\064\ufff4\065\ufff4\066\ufff4\071\ufff4\001\002\000\062\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\020\ufff5\023\ufff5\025\ufff5\026" +
    "\ufff5\031\ufff5\037\ufff5\042\ufff5\044\ufff5\054\ufff5\063\ufff5" +
    "\064\ufff5\065\ufff5\066\ufff5\071\ufff5\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\011\005\015\007\014\021\005\001\001\000\004" +
    "\014\331\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\275\007\276\021\005\024\301" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\275\007\276\021\005\024\274\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\026\020\022\001\001\000\004\021\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\031\001\001\000\010\007\033" +
    "\010\032\021\005\001\001\000\002\001\001\000\014\004" +
    "\044\012\057\013\040\017\051\023\047\001\001\000\010" +
    "\007\035\021\005\027\034\001\001\000\002\001\001\000" +
    "\010\007\035\021\005\027\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\057\013\255\017\051\023" +
    "\047\025\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\202\001\001\000\004\026\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\120\001\001\000\004\017\117" +
    "\001\001\000\004\017\116\001\001\000\004\017\115\001" +
    "\001\000\004\017\114\001\001\000\004\017\113\001\001" +
    "\000\004\017\112\001\001\000\004\017\111\001\001\000" +
    "\004\017\110\001\001\000\004\017\107\001\001\000\002" +
    "\001\001\000\004\017\106\001\001\000\004\017\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\124\001\001\000\002" +
    "\001\001\000\004\017\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\132\001\001" +
    "\000\002\001\001\000\004\006\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\142\020\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\033\010\145" +
    "\021\005\001\001\000\014\004\146\012\057\013\040\017" +
    "\051\023\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\051\023\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\204\001\001\000\004\031\205\001\001" +
    "\000\002\001\001\000\004\017\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\213\001\001\000\014" +
    "\004\216\012\057\013\040\017\051\023\047\001\001\000" +
    "\002\001\001\000\004\022\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\230\001\001\000\002\001\001\000" +
    "\004\017\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\033\010\234\021\005\001" +
    "\001\000\014\004\235\012\057\013\040\017\051\023\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\240\001\001\000\002\001\001\000\010\007\033\010\242" +
    "\021\005\001\001\000\014\004\243\012\057\013\040\017" +
    "\051\023\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\254\001\001\000\002\001\001\000\014\012" +
    "\057\013\255\017\051\023\047\025\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\264\001\001" +
    "\000\002\001\001\000\004\020\266\001\001\000\004\021" +
    "\267\001\001\000\002\001\001\000\004\030\271\001\001" +
    "\000\002\001\001\000\014\004\273\012\057\013\040\017" +
    "\051\023\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\275\007\276\021\005\024\300\001\001\000" +
    "\012\003\275\007\276\021\005\024\277\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\304\033\305\001\001\000\004\014\310" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\312\001\001\000\004" +
    "\015\323\001\001\000\004\017\316\001\001\000\004\017" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\304\033\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\325" +
    "\001\001\000\004\015\326\001\001\000\002\001\001\000" +
    "\006\021\304\033\330\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\312\001\001\000\004\017\334\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$YASPL3Cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$YASPL3Cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$YASPL3Cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 
	YASPL3Lex lexer;
	
	public YASPL3Cup(YASPL3Lex  lexer){
	    super(lexer); 
	    this.lexer = lexer;
    }
    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$YASPL3Cup$actions {
  private final YASPL3Cup parser;

  /** Constructor */
  CUP$YASPL3Cup$actions(YASPL3Cup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$YASPL3Cup$do_action_part00000000(
    int                        CUP$YASPL3Cup$act_num,
    java_cup.runtime.lr_parser CUP$YASPL3Cup$parser,
    java.util.Stack            CUP$YASPL3Cup$stack,
    int                        CUP$YASPL3Cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$YASPL3Cup$result;

      /* select the action based on the action number */
      switch (CUP$YASPL3Cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= HEAD Decls START Statements 
            {
              ScopeNode RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		OpNode decls = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		OpNode statements = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT= new ProgramOp("ProgramOp",decls,statements);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Programma",0, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		ScopeNode start_val = (ScopeNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		RESULT = start_val;
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$YASPL3Cup$parser.done_parsing();
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= Var_decl Decls_list 
            {
              OpNode RESULT =null;
		int vardeclleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int vardeclright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		OpNode vardecl = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node declList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 OpNode toReturn =new OpNode("DeclsVarOp",vardecl);
						if(declList!=null){
							for (Node node : ((OpNode) declList).nodeList()){
								toReturn.addNode(node);
							}
						}
						RESULT = toReturn; 
						 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Decls",3, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= Def_decl Decls_list 
            {
              OpNode RESULT =null;
		int defDeclleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int defDeclright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		ScopeNode defDecl = (ScopeNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node declList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 OpNode toReturn =new OpNode("DefDeclOp",defDecl);
								if(declList!=null){
									for (Node node : ((OpNode) declList).nodeList()){
										toReturn.addNode(node);
									}
								}
							RESULT = toReturn; 	
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Decls",3, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= 
            {
              OpNode RESULT =null;
		 RESULT = null; 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Decls",3, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decls_list ::= Var_decl Decls_list 
            {
              Node RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		OpNode varDecl = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node declList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 OpNode toReturn =new OpNode("Declslist",varDecl);
						if(declList!=null){
							for (Node node : ((OpNode) declList).nodeList()){
								toReturn.addNode(node);
							}
						}
						RESULT = toReturn; 
						 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Decls_list",18, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decls_list ::= Def_decl Decls_list 
            {
              Node RESULT =null;
		int defDeclleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int defDeclright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		ScopeNode defDecl = (ScopeNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node declList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 OpNode toReturn =new OpNode("Declslist",defDecl);
								if(declList!=null){
									for (Node node : ((OpNode) declList).nodeList()){
										toReturn.addNode(node);
									}
								}
							RESULT = toReturn; 	
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Decls_list",18, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decls_list ::= 
            {
              Node RESULT =null;
		 RESULT = null; 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Decls_list",18, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Statements ::= Stat Statements_list 
            {
              OpNode RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		Node stat = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int statementsListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int statementsListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node statementsList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		  OpNode toReturn =new OpNode("StatementsOp",stat);
						if(statementsList!=null){
							for(Node node :((OpNode) statementsList).nodeList()){
								toReturn.addNode(node);
							}
						}
						RESULT= toReturn;
					 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Statements ::= 
            {
              OpNode RESULT =null;
		 RESULT = null; 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statements_list ::= Stat Statements_list 
            {
              Node RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		Node stat = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int statementsListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int statementsListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node statementsList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		  OpNode toReturn =new OpNode("StatementsList",stat);
						if(statementsList!=null){
							for(Node node :((OpNode) statementsList).nodeList()){
								toReturn.addNode(node);
							}
						}
						RESULT= toReturn;
					 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Statements_list",19, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statements_list ::= 
            {
              Node RESULT =null;
		 RESULT = null; 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Statements_list",19, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Var_decl ::= Type Var_decls_init SEMI 
            {
              OpNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Leaf type = (Leaf)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int varDeclsInitleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int varDeclsInitright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		OpNode varDeclsInit = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		 RESULT=new VarDeclOp("VarDeclOp",type,varDeclsInit);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_decl",5, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Var_decl ::= Type ID LQPAR Expr RQPAR SEMI 
            {
              OpNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-5)).right;
		Leaf type = (Leaf)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).value;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		 RESULT=new ArrayOp("ArrayOp",type,new ArrayIndexOp("ArrayIndexOp",new Leaf("ID",id,""),expr1));
					
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_decl",5, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-5)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Var_decl ::= STRUCT ID LGPAR Var_struct_list RGPAR SEMI 
            {
              OpNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).value;
		int varstructlistleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int varstructlistright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		OpNode varstructlist = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		
					RESULT=new StructOp("StructOp",new Leaf("ID",id,""),varstructlist);
					
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_decl",5, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-5)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Var_struct_list ::= Type Var_decls_init SEMI Var_struct_list 
            {
              OpNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		Leaf type = (Leaf)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		int varDeclsInitleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int varDeclsInitright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		OpNode varDeclsInit = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int varstructlistleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int varstructlistright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		OpNode varstructlist = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		  
						OpNode toReturn =new StructInitOp("StructInitOp",new VarDeclOp("VarDeclOp",type,varDeclsInit));
						if(varstructlist!=null){
							for(Node node :((OpNode) varstructlist).nodeList()){
								toReturn.addNode(node);
							}
						}
						RESULT= toReturn;
					 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_struct_list",25, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Var_struct_list ::= Type ID LQPAR Expr RQPAR SEMI Var_struct_list 
            {
              OpNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-6)).right;
		Leaf type = (Leaf)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-5)).value;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		int varstructlistleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int varstructlistright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		OpNode varstructlist = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 
						OpNode toReturn =new StructInitOp("StructInitOp",new ArrayOp("ArrayOp",type,new ArrayIndexOp("ArrayIndexOp",new Leaf("ID",id,""),expr1)));
						if(varstructlist!=null){
							for(Node node :((OpNode) varstructlist).nodeList()){
								toReturn.addNode(node);
							}
						}
						RESULT= toReturn;
					
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_struct_list",25, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-6)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Var_struct_list ::= 
            {
              OpNode RESULT =null;
		 RESULT = null; 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_struct_list",25, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= INT 
            {
              Leaf RESULT =null;
		RESULT= new Leaf("integer", null,"integer"); 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Type",15, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= BOOL 
            {
              Leaf RESULT =null;
		RESULT= new Leaf ("boolean", null,"boolean");
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Type",15, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= DOUBLE 
            {
              Leaf RESULT =null;
		RESULT= new Leaf ("double", null,"double");
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Type",15, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= STRING 
            {
              Leaf RESULT =null;
		RESULT= new Leaf ("string", null,"string");
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Type",15, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= CHAR 
            {
              Leaf RESULT =null;
		RESULT= new Leaf ("char", null,"char");
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Type",15, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Var_decls_init ::= ID Var_init_value Var_decls_init_list 
            {
              OpNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int varInitValueleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int varInitValueright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		OpNode varInitValue = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int varDecInListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int varDecInListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		OpNode varDecInList = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 OpNode toReturn= new VarInitOp("VarInitOp",new Leaf("ID",id,""),varInitValue); 
					if(varDecInList!=null){
						for(Node node:((OpNode) varDecInList).nodeList()){
							toReturn.addNode(node);
						}
					}
					
					RESULT = toReturn; 
					
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_decls_init",10, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Var_decls_init_list ::= COMMA ID Var_init_value Var_decls_init_list 
            {
              OpNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int varInitValueleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int varInitValueright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		OpNode varInitValue = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int varDecInListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int varDecInListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		OpNode varDecInList = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 OpNode toReturn= new VarInitOp("VarInitList",new Leaf("ID",id,""),varInitValue); 
						if(varDecInList!=null){
							for(Node node:((OpNode) varDecInList).nodeList()){
		  						toReturn.addNode(node);
							}
						}
					RESULT = toReturn;
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_decls_init_list",11, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Var_decls_init_list ::= 
            {
              OpNode RESULT =null;
		 RESULT= null;
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_decls_init_list",11, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Var_init_value ::= ASSIGN Expr 
            {
              OpNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		RESULT=new OpNode("InitializationOp",expr);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_init_value",12, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Var_init_value ::= 
            {
              OpNode RESULT =null;
		RESULT= null;
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_init_value",12, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Vars ::= ID Vars_List 
            {
              OpNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node varsList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		  OpNode toReturn= new OpNode("VarsOp",new Leaf("ID",id,"")); 
						if(varsList!=null){
							for(Node node: ((OpNode) varsList).nodeList()){
								toReturn.addNode(node);
							}
						
						}											
						RESULT=toReturn;
						
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Vars",8, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Vars_List ::= COMMA ID Vars_List 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node varList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		OpNode toReturn= new OpNode("VarsList",new Leaf("ID",id,""));
						if(varList!=null){
							for(Node node:((OpNode) varList).nodeList()){
								toReturn.addNode(node);
							}
						}		
						RESULT=toReturn; 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Vars_List",20, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Vars_List ::= 
            {
              Node RESULT =null;
		 RESULT=null; 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Vars_List",20, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Def_decl ::= DEF ID LPAR Par_decls RPAR Body 
            {
              ScopeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).value;
		int parDeclsleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int parDeclsright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		OpNode parDecls = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		OpNode body = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 
						RESULT= new ProcDeclOp("ProcDeclOp",new Leaf("ID",id,""),parDecls,body);
						
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Def_decl",1, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-5)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Def_decl ::= DEF ID LPAR RPAR Body 
            {
              ScopeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		OpNode body = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT= new ProcDeclOp("ProcDeclOp",new Leaf("ID",id,""),body);
						
						
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Def_decl",1, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Var_decls ::= Var_decl Var_decl_list 
            {
              OpNode RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		OpNode varDecl = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node varDeclList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		OpNode toReturn= new OpNode ("VarDeclsOp",varDecl);
						if(varDeclList!=null){
							for(Node node:((OpNode) varDeclList).nodeList()){
								toReturn.addNode(node);
								
							}
						}
						RESULT= toReturn;
						 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_decls",6, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Var_decls ::= 
            {
              OpNode RESULT =null;
		RESULT=null;
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_decls",6, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Var_decl_list ::= Var_decl Var_decl_list 
            {
              Node RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		OpNode varDecl = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node varDeclList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		OpNode toReturn= new OpNode ("VarDeclList",varDecl);
					  	if(varDeclList!=null){
							for(Node node:((OpNode) varDeclList).nodeList()){
									toReturn.addNode(node);
							}
						}
						RESULT= toReturn;
						 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_decl_list",21, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Var_decl_list ::= 
            {
              Node RESULT =null;
		RESULT=null;
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_decl_list",21, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Par_decls ::= Par_Type Type ID Par_decls_list 
            {
              OpNode RESULT =null;
		int parTypeleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int parTyperight = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		Leaf parType = (Leaf)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Leaf type = (Leaf)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int parDeclsListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int parDeclsListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node parDeclsList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 OpNode toReturn= new ParOp("ParOp",parType,type,new Leaf("ID",id,""));
						if(parDeclsList!=null){
							for(Node node: ((OpNode)parDeclsList).nodeList()){
								toReturn.addNode(node);
							}
					
						}
					
						RESULT=toReturn;
					
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Par_decls",7, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Par_decls_list ::= COMMA Par_Type Type ID Par_decls_list 
            {
              Node RESULT =null;
		int parTypeleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int parTyperight = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		Leaf parType = (Leaf)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Leaf type = (Leaf)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int parDeclsListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int parDeclsListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node parDeclsList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 OpNode toReturn= new ParOp("ParDeclsList",parType,type,new Leaf("ID",id,""));
						   if(parDeclsList!=null){
						   	for(Node node:((OpNode) parDeclsList).nodeList()){
						   		toReturn.addNode(node);
						   	}
						   
						   }
						   RESULT=toReturn;
						
						
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Par_decls_list",22, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Par_decls_list ::= 
            {
              Node RESULT =null;
		 RESULT=null; 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Par_decls_list",22, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Par_Type ::= IN 
            {
              Leaf RESULT =null;
		RESULT= new Leaf("in","in",null);  
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Par_Type",14, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Par_Type ::= OUT 
            {
              Leaf RESULT =null;
		RESULT= new Leaf("out","out",null);  
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Par_Type",14, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Par_Type ::= INOUT 
            {
              Leaf RESULT =null;
		RESULT= new Leaf("inout","inout", null);  
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Par_Type",14, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Body ::= LGPAR Var_decls Statements RGPAR 
            {
              OpNode RESULT =null;
		int varDeclsleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int varDeclsright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		OpNode varDecls = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		OpNode statements = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		RESULT= new OpNode("BodyOp",varDecls,statements);
						
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Body",4, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= Vars READ SEMI 
            {
              Node RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		OpNode vars = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		RESULT=new ReadOp("ReadOP",vars);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= Args WRITE SEMI 
            {
              Node RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		OpNode args = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		RESULT= new WriteOp("WriteOp",args); 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= ID ASSIGN Expr SEMI 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		RESULT= new AssignOp("AssignOp",new Leaf("ID",id,""),expr); 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= ID LPAR Args RPAR SEMI 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		OpNode args = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		RESULT= new CallOp("CallOp",new Leaf("ID",id,""),args); 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= ID LPAR RPAR SEMI 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		RESULT= new CallOp("CallOp",new Leaf("ID",id,"")); 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= IF LPAR Expr RPAR THEN Comp_stat ELSE Comp_stat 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-5)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-5)).value;
		int compStat1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int compStat1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node compStat1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int compStat2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int compStat2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node compStat2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		RESULT= new IfThenElseOp("IfThenElseOp",expr,compStat1,compStat2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-7)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= IF LPAR Expr RPAR THEN Comp_stat 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		int compStatleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int compStatright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node compStat = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		RESULT=new IfThenOp("IfThenOp",expr,compStat);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-5)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stat ::= WHILE LPAR Expr RPAR DO Comp_stat 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		int compStatleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int compStatright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node compStat = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		RESULT=new WhileOp("WhileOp",expr,compStat);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-5)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stat ::= FOR LPAR ID ASSIGN Expr SEMI Expr SEMI ID ASSIGN Expr RPAR Body 
            {
              Node RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-10)).value;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-8)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-8)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-8)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-6)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-6)).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).value;
		int expr3left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr3right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr3 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int bdleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int bdright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		OpNode bd = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT=new ForOp("ForOp",new AssignOp("AssignOp",new Leaf("ID",id1,""),expr1),expr2,new AssignOp("AssignOp",new Leaf("ID",id2,""),expr3),bd); 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-12)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stat ::= ID PLUS PLUS SEMI 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		 RESULT=new IncrementsOp("IncrementOp",new Leaf("ID",id,""));
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stat ::= ID MINUS MINUS SEMI 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		 RESULT=new DecreaseOp("DecreaseOp",new Leaf("ID",id,""));
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Stat ::= SWITCH LPAR ID RPAR LGPAR CaseList RGPAR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).value;
		int case_listleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int case_listright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		Node case_list = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		 RESULT=new SwitchOp("SwitchOp",new Leaf("ID",id,""),case_list);
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-6)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Stat ::= ID LQPAR INT_CONST RQPAR ASSIGN Expr SEMI 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-6)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).right;
		String index = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).value;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		
								RESULT=new ArrayAssignOp("ArrayAssignOp",new ArrayIndexOp("ArrayIndexOp",new Leaf("ID",id,""),new Leaf("INT_CONST",index,"integer")),expr1);
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-6)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Stat ::= DEF ID LPAR Par_decls RPAR LGPAR Var_decls Statements RGPAR SEMI 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-8)).value;
		int parDeclsleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-6)).left;
		int parDeclsright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-6)).right;
		OpNode parDecls = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-6)).value;
		int varDeclsleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int varDeclsright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		OpNode varDecls = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		OpNode statements = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		 
								RESULT= new InternalDefOp("InternalDefOp",new ProcDeclOp("ProcDeclOp",new Leaf("ID",id,""),parDecls,new OpNode("BodyOp",varDecls,statements)));
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-9)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CaseList ::= CASE Expr TWOPOINTS Var_decls Statements BREAK SEMI CaseList 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-6)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-6)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-6)).value;
		int vardecls1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).left;
		int vardecls1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).right;
		OpNode vardecls1 = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).value;
		int statements1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int statements1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		OpNode statements1 = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		int case_listleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int case_listright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node case_list = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		
							OpNode toReturn=new CaseListOp("CaseListOp",new CaseOp("CaseOp",expr1,vardecls1, statements1));
							if(case_list!=null){
								for(Node node :((OpNode)case_list).nodeList()){
									toReturn.addNode(node);
								
								}
							
							}
							RESULT=toReturn;
						
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("CaseList",24, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-7)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CaseList ::= DEFAULT TWOPOINTS Var_decls Statements BREAK SEMI 
            {
              Node RESULT =null;
		int vardecls1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int vardecls1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		OpNode vardecls1 = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		int statements1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int statements1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		OpNode statements1 = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		 RESULT=new CaseListOp("CaseListOp",new DefaultOp("DefaultOp",vardecls1, statements1));
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("CaseList",24, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-5)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CaseList ::= 
            {
              Node RESULT =null;
		 
							RESULT=null; 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("CaseList",24, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Args ::= Expr Args_list 
            {
              OpNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int argsListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int argsListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node argsList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		
							OpNode toReturn=new OpNode("ArgsOp",expr);
							if(argsList!=null){
								for(Node node :((OpNode)argsList).nodeList()){
									toReturn.addNode(node);
								
								}
							
							}
							RESULT=toReturn;
							
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Args",17, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Args_list ::= COMMA Expr Args_list 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int argsListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int argsListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node argsList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		
							
							 OpNode toReturn=new OpNode("argsList",expr);
							
							if(argsList!=null){
								for(Node node :((OpNode)argsList).nodeList()){
									toReturn.addNode(node);
								
								}
								
							}
							RESULT=toReturn;
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Args_list",23, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Args_list ::= 
            {
              Node RESULT =null;
		 
							RESULT=null; 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Args_list",23, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Comp_stat ::= LGPAR Statements RGPAR 
            {
              Node RESULT =null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		OpNode statements = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		RESULT=new OpNode("CompStatOp",statements);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Comp_stat",16, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Expr PLUS Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("AddOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Expr MINUS Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("DiffOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr TIMES Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("MulOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr DIV Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("DivOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr AND Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("AndOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr OR Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("OrOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr GE Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("GeOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr LT Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("LtOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr LE Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("LeOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr EQ Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("EqOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr GT Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("GtOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr MOD Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new ModOp("ModOp",expr1,expr2); 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= MINUS Expr 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new SingleOp("UminusOp", expr); 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= NOT Expr 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		RESULT=new SingleOp("NotOp",expr);  
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= LPAR Expr RPAR 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		RESULT=expr;  
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= TRUE 
            {
              Node RESULT =null;
		 RESULT= new Leaf("BOOL_CONST","true","boolean"); 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= FALSE 
            {
              Node RESULT =null;
		 RESULT= new Leaf("BOOL_CONST","false", "boolean"); 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		RESULT=new Leaf("ID",id,""); 
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= INT_CONST 
            {
              Node RESULT =null;
		int intConstleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int intConstright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		String intConst = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		RESULT=new Leaf("INT_CONST",intConst,"integer"); 
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= DOUBLE_CONST 
            {
              Node RESULT =null;
		int doubleConstleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int doubleConstright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		String doubleConst = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		RESULT=new Leaf("DOUBLE_CONST",doubleConst,"double"); 
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= STRING_CONST 
            {
              Node RESULT =null;
		int stringConstleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int stringConstright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		String stringConst = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		
							 RESULT=new Leaf("STRING_CONST",stringConst,"string"); 
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= CHAR_CONST 
            {
              Node RESULT =null;
		int charConstleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int charConstright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		String charConst = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		RESULT=new Leaf("CHAR_CONST",charConst,"char"); 
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= ID LQPAR INT_CONST RQPAR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		String index = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		RESULT=new ArrayIndexOp("ArrayIndexOp",new Leaf("ID",id,""),new Leaf("INT_CONST",index,"integer"));
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$YASPL3Cup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$YASPL3Cup$do_action(
    int                        CUP$YASPL3Cup$act_num,
    java_cup.runtime.lr_parser CUP$YASPL3Cup$parser,
    java.util.Stack            CUP$YASPL3Cup$stack,
    int                        CUP$YASPL3Cup$top)
    throws java.lang.Exception
    {
              return CUP$YASPL3Cup$do_action_part00000000(
                               CUP$YASPL3Cup$act_num,
                               CUP$YASPL3Cup$parser,
                               CUP$YASPL3Cup$stack,
                               CUP$YASPL3Cup$top);
    }
}

}
