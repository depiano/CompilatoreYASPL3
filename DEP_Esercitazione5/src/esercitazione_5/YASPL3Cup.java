
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione_5;

import SyntaxTree.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class YASPL3Cup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return YASPL3Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public YASPL3Cup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public YASPL3Cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public YASPL3Cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\006\000\002\002\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\002\000\002\024\004" +
    "\000\002\024\004\000\002\024\002\000\002\004\004\000" +
    "\002\004\002\000\002\025\004\000\002\025\002\000\002" +
    "\007\005\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\014\005" +
    "\000\002\015\006\000\002\015\002\000\002\016\004\000" +
    "\002\016\002\000\002\012\004\000\002\026\005\000\002" +
    "\026\002\000\002\003\010\000\002\003\007\000\002\010" +
    "\004\000\002\010\002\000\002\027\004\000\002\027\002" +
    "\000\002\011\006\000\002\030\007\000\002\030\002\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\006\006\000\002\013\005\000\002\013\005\000\002\013" +
    "\006\000\002\013\007\000\002\013\006\000\002\013\012" +
    "\000\002\013\010\000\002\013\010\000\002\023\004\000" +
    "\002\031\005\000\002\031\002\000\002\022\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\004\000\002\017\004\000\002" +
    "\017\005\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\004\004\005\001\002\000\004\002\223\001" +
    "\002\000\020\005\ufffd\006\007\007\010\010\013\011\012" +
    "\012\017\013\016\001\002\000\004\057\211\001\002\000" +
    "\004\057\ufff4\001\002\000\004\057\ufff3\001\002\000\020" +
    "\005\ufffa\006\007\007\010\010\013\011\012\012\017\013" +
    "\016\001\002\000\004\057\ufff1\001\002\000\004\057\ufff2" +
    "\001\002\000\020\005\ufffa\006\007\007\010\010\013\011" +
    "\012\012\017\013\016\001\002\000\004\005\200\001\002" +
    "\000\004\057\020\001\002\000\004\057\ufff0\001\002\000" +
    "\004\025\021\001\002\000\012\026\027\046\024\047\022" +
    "\050\025\001\002\000\014\006\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\001\002\000\014\006\007\007\010\010\013" +
    "\011\012\012\017\001\002\000\014\006\uffde\007\uffde\010" +
    "\uffde\011\uffde\012\uffde\001\002\000\014\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\001\002\000\004\026\166\001" +
    "\002\000\004\027\030\001\002\000\046\006\007\007\010" +
    "\010\013\011\012\012\017\014\uffe4\015\uffe4\016\uffe4\020" +
    "\uffe4\025\uffe4\030\uffe4\032\uffe4\042\uffe4\051\uffe4\052\uffe4" +
    "\053\uffe4\054\uffe4\057\uffe4\001\002\000\020\005\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\001\002" +
    "\000\034\014\043\015\050\016\047\020\040\025\045\030" +
    "\ufff8\032\037\042\054\051\041\052\055\053\052\054\044" +
    "\057\051\001\002\000\046\006\007\007\010\010\013\011" +
    "\012\012\017\014\uffe2\015\uffe2\016\uffe2\020\uffe2\025\uffe2" +
    "\030\uffe2\032\uffe2\042\uffe2\051\uffe2\052\uffe2\053\uffe2\054" +
    "\uffe2\057\uffe2\001\002\000\034\014\uffe5\015\uffe5\016\uffe5" +
    "\020\uffe5\025\uffe5\030\uffe5\032\uffe5\042\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\057\uffe5\001\002\000\046\006\007" +
    "\007\010\010\013\011\012\012\017\014\uffe2\015\uffe2\016" +
    "\uffe2\020\uffe2\025\uffe2\030\uffe2\032\uffe2\042\uffe2\051\uffe2" +
    "\052\uffe2\053\uffe2\054\uffe2\057\uffe2\001\002\000\034\014" +
    "\uffe3\015\uffe3\016\uffe3\020\uffe3\025\uffe3\030\uffe3\032\uffe3" +
    "\042\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\057\uffe3\001" +
    "\002\000\026\014\043\015\050\025\045\032\037\042\054" +
    "\051\041\052\055\053\052\054\044\057\065\001\002\000" +
    "\004\025\160\001\002\000\040\023\uffbd\024\uffbd\026\uffbd" +
    "\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\043\uffbd\044\uffbd\056\uffbd\001\002" +
    "\000\036\024\155\026\uffd0\031\074\032\071\033\101\034" +
    "\077\035\100\036\073\037\102\040\076\041\075\043\072" +
    "\044\103\056\uffd0\001\002\000\040\023\uffc0\024\uffc0\026" +
    "\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\043\uffc0\044\uffc0\056\uffc0\001" +
    "\002\000\040\023\uffbb\024\uffbb\026\uffbb\031\uffbb\032\uffbb" +
    "\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041" +
    "\uffbb\043\uffbb\044\uffbb\056\uffbb\001\002\000\026\014\043" +
    "\015\050\025\045\032\037\042\054\051\041\052\055\053" +
    "\052\054\044\057\065\001\002\000\004\030\151\001\002" +
    "\000\004\025\137\001\002\000\040\023\uffbf\024\uffbf\026" +
    "\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\043\uffbf\044\uffbf\056\uffbf\001" +
    "\002\000\044\024\122\025\123\027\066\031\uffbe\032\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\043\uffbe\044\uffbe\045\125\055\uffe8\056\uffbe\001\002" +
    "\000\040\023\uffba\024\uffba\026\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\043\uffba\044\uffba\056\uffba\001\002\000\036\002\ufff6\014" +
    "\043\015\050\016\047\020\040\025\045\030\ufff6\032\037" +
    "\042\054\051\041\052\055\053\052\054\044\057\051\001" +
    "\002\000\026\014\043\015\050\025\045\032\037\042\054" +
    "\051\041\052\055\053\052\054\044\057\065\001\002\000" +
    "\040\023\uffbc\024\uffbc\026\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\043" +
    "\uffbc\044\uffbc\056\uffbc\001\002\000\004\055\062\001\002" +
    "\000\004\056\060\001\002\000\004\023\061\001\002\000" +
    "\036\002\uffd9\014\uffd9\015\uffd9\016\uffd9\020\uffd9\025\uffd9" +
    "\030\uffd9\032\uffd9\042\uffd9\051\uffd9\052\uffd9\053\uffd9\054" +
    "\uffd9\057\uffd9\001\002\000\004\023\063\001\002\000\036" +
    "\002\uffda\014\uffda\015\uffda\016\uffda\020\uffda\025\uffda\030" +
    "\uffda\032\uffda\042\uffda\051\uffda\052\uffda\053\uffda\054\uffda" +
    "\057\uffda\001\002\000\040\023\uffc2\024\uffc2\026\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\043\uffc2\044\uffc2\056\uffc2\001\002\000" +
    "\042\023\uffbe\024\uffbe\026\uffbe\027\066\031\uffbe\032\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\043\uffbe\044\uffbe\056\uffbe\001\002\000\004\051\067" +
    "\001\002\000\004\030\070\001\002\000\040\023\uffb9\024" +
    "\uffb9\026\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\041\uffb9\043\uffb9\044\uffb9\056" +
    "\uffb9\001\002\000\026\014\043\015\050\025\045\032\037" +
    "\042\054\051\041\052\055\053\052\054\044\057\065\001" +
    "\002\000\026\014\043\015\050\025\045\032\037\042\054" +
    "\051\041\052\055\053\052\054\044\057\065\001\002\000" +
    "\026\014\043\015\050\025\045\032\037\042\054\051\041" +
    "\052\055\053\052\054\044\057\065\001\002\000\026\014" +
    "\043\015\050\025\045\032\037\042\054\051\041\052\055" +
    "\053\052\054\044\057\065\001\002\000\026\014\043\015" +
    "\050\025\045\032\037\042\054\051\041\052\055\053\052" +
    "\054\044\057\065\001\002\000\026\014\043\015\050\025" +
    "\045\032\037\042\054\051\041\052\055\053\052\054\044" +
    "\057\065\001\002\000\026\014\043\015\050\025\045\032" +
    "\037\042\054\051\041\052\055\053\052\054\044\057\065" +
    "\001\002\000\026\014\043\015\050\025\045\032\037\042" +
    "\054\051\041\052\055\053\052\054\044\057\065\001\002" +
    "\000\026\014\043\015\050\025\045\032\037\042\054\051" +
    "\041\052\055\053\052\054\044\057\065\001\002\000\026" +
    "\014\043\015\050\025\045\032\037\042\054\051\041\052" +
    "\055\053\052\054\044\057\065\001\002\000\026\014\043" +
    "\015\050\025\045\032\037\042\054\051\041\052\055\053" +
    "\052\054\044\057\065\001\002\000\040\023\uffc9\024\uffc9" +
    "\026\uffc9\031\uffc9\032\uffc9\033\101\034\077\035\100\036" +
    "\073\037\102\040\076\041\075\043\072\044\uffc9\056\uffc9" +
    "\001\002\000\026\023\uffc7\024\uffc7\026\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\043\uffc7\044\uffc7\056\uffc7\001\002" +
    "\000\040\023\uffcc\024\uffcc\026\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\100\036\073\037\102\040\076\041\075" +
    "\043\uffcc\044\uffcc\056\uffcc\001\002\000\026\023\uffc4\024" +
    "\uffc4\026\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\043\uffc4" +
    "\044\uffc4\056\uffc4\001\002\000\040\023\uffcb\024\uffcb\026" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\100\036\073" +
    "\037\102\040\076\041\075\043\uffcb\044\uffcb\056\uffcb\001" +
    "\002\000\026\023\uffc6\024\uffc6\026\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\043\uffc6\044\uffc6\056\uffc6\001\002\000" +
    "\026\023\uffc5\024\uffc5\026\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\043\uffc5\044\uffc5\056\uffc5\001\002\000\040\023" +
    "\uffce\024\uffce\026\uffce\031\uffce\032\uffce\033\101\034\077" +
    "\035\100\036\073\037\102\040\076\041\075\043\072\044" +
    "\uffce\056\uffce\001\002\000\026\023\uffc8\024\uffc8\026\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\043\uffc8\044\uffc8\056" +
    "\uffc8\001\002\000\040\023\uffca\024\uffca\026\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\100\036\073\037\102\040" +
    "\076\041\075\043\uffca\044\uffca\056\uffca\001\002\000\040" +
    "\023\uffcd\024\uffcd\026\uffcd\031\uffcd\032\uffcd\033\101\034" +
    "\077\035\100\036\073\037\102\040\076\041\075\043\072" +
    "\044\uffcd\056\uffcd\001\002\000\006\002\ufff9\030\ufff9\001" +
    "\002\000\036\002\ufff6\014\043\015\050\016\047\020\040" +
    "\025\045\030\ufff6\032\037\042\054\051\041\052\055\053" +
    "\052\054\044\057\051\001\002\000\006\002\ufff7\030\ufff7" +
    "\001\002\000\004\057\135\001\002\000\030\014\043\015" +
    "\050\025\045\026\130\032\037\042\054\051\041\052\055" +
    "\053\052\054\044\057\065\001\002\000\004\055\uffea\001" +
    "\002\000\026\014\043\015\050\025\045\032\037\042\054" +
    "\051\041\052\055\053\052\054\044\057\065\001\002\000" +
    "\032\023\127\031\074\032\071\033\101\034\077\035\100" +
    "\036\073\037\102\040\076\041\075\043\072\044\103\001" +
    "\002\000\036\002\uffd8\014\uffd8\015\uffd8\016\uffd8\020\uffd8" +
    "\025\uffd8\030\uffd8\032\uffd8\042\uffd8\051\uffd8\052\uffd8\053" +
    "\uffd8\054\uffd8\057\uffd8\001\002\000\004\023\134\001\002" +
    "\000\004\026\132\001\002\000\004\023\133\001\002\000" +
    "\036\002\uffd7\014\uffd7\015\uffd7\016\uffd7\020\uffd7\025\uffd7" +
    "\030\uffd7\032\uffd7\042\uffd7\051\uffd7\052\uffd7\053\uffd7\054" +
    "\uffd7\057\uffd7\001\002\000\036\002\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\020\uffd6\025\uffd6\030\uffd6\032\uffd6\042\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\054\uffd6\057\uffd6\001\002\000\006" +
    "\024\122\055\uffe8\001\002\000\004\055\uffe9\001\002\000" +
    "\026\014\043\015\050\025\045\032\037\042\054\051\041" +
    "\052\055\053\052\054\044\057\065\001\002\000\032\026" +
    "\141\031\074\032\071\033\101\034\077\035\100\036\073" +
    "\037\102\040\076\041\075\043\072\044\103\001\002\000" +
    "\004\017\142\001\002\000\004\027\143\001\002\000\034" +
    "\014\043\015\050\016\047\020\040\025\045\030\ufff8\032" +
    "\037\042\054\051\041\052\055\053\052\054\044\057\051" +
    "\001\002\000\040\002\uffd4\014\uffd4\015\uffd4\016\uffd4\020" +
    "\uffd4\022\145\025\uffd4\030\uffd4\032\uffd4\042\uffd4\051\uffd4" +
    "\052\uffd4\053\uffd4\054\uffd4\057\uffd4\001\002\000\004\027" +
    "\143\001\002\000\036\002\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\020\uffd5\025\uffd5\030\uffd5\032\uffd5\042\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\054\uffd5\057\uffd5\001\002\000\004\030\150" +
    "\001\002\000\040\002\uffcf\014\uffcf\015\uffcf\016\uffcf\020" +
    "\uffcf\022\uffcf\025\uffcf\030\uffcf\032\uffcf\042\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\054\uffcf\057\uffcf\001\002\000\020\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\001\002\000\032\026\153\031\074\032\071\033\101\034" +
    "\077\035\100\036\073\037\102\040\076\041\075\043\072" +
    "\044\103\001\002\000\040\023\uffc1\024\uffc1\026\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\043\uffc1\044\uffc1\056\uffc1\001\002\000" +
    "\006\026\uffd2\056\uffd2\001\002\000\026\014\043\015\050" +
    "\025\045\032\037\042\054\051\041\052\055\053\052\054" +
    "\044\057\065\001\002\000\036\024\155\026\uffd0\031\074" +
    "\032\071\033\101\034\077\035\100\036\073\037\102\040" +
    "\076\041\075\043\072\044\103\056\uffd0\001\002\000\006" +
    "\026\uffd1\056\uffd1\001\002\000\026\014\043\015\050\025" +
    "\045\032\037\042\054\051\041\052\055\053\052\054\044" +
    "\057\065\001\002\000\032\026\162\031\074\032\071\033" +
    "\101\034\077\035\100\036\073\037\102\040\076\041\075" +
    "\043\072\044\103\001\002\000\004\021\163\001\002\000" +
    "\004\027\143\001\002\000\036\002\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\020\uffd3\025\uffd3\030\uffd3\032\uffd3\042\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\054\uffd3\057\uffd3\001\002\000\040" +
    "\023\uffc3\024\uffc3\026\uffc3\031\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\043\uffc3" +
    "\044\uffc3\056\uffc3\001\002\000\004\027\030\001\002\000" +
    "\020\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\001\002\000\004\057\171\001\002\000\006\024" +
    "\172\026\uffdf\001\002\000\010\046\024\047\022\050\025" +
    "\001\002\000\004\026\uffe1\001\002\000\014\006\007\007" +
    "\010\010\013\011\012\012\017\001\002\000\004\057\176" +
    "\001\002\000\006\024\172\026\uffdf\001\002\000\004\026" +
    "\uffe0\001\002\000\034\002\ufff8\014\043\015\050\016\047" +
    "\020\040\025\045\032\037\042\054\051\041\052\055\053" +
    "\052\054\044\057\051\001\002\000\004\002\001\001\002" +
    "\000\004\005\uffff\001\002\000\020\005\ufffa\006\007\007" +
    "\010\010\013\011\012\012\017\013\016\001\002\000\020" +
    "\005\ufffa\006\007\007\010\010\013\011\012\012\017\013" +
    "\016\001\002\000\004\005\ufffc\001\002\000\004\005\ufffb" +
    "\001\002\000\004\005\ufffe\001\002\000\004\023\222\001" +
    "\002\000\010\023\uffeb\024\uffeb\045\213\001\002\000\006" +
    "\023\uffed\024\215\001\002\000\026\014\043\015\050\025" +
    "\045\032\037\042\054\051\041\052\055\053\052\054\044" +
    "\057\065\001\002\000\034\023\uffec\024\uffec\031\074\032" +
    "\071\033\101\034\077\035\100\036\073\037\102\040\076" +
    "\041\075\043\072\044\103\001\002\000\004\057\217\001" +
    "\002\000\004\023\uffef\001\002\000\010\023\uffeb\024\uffeb" +
    "\045\213\001\002\000\006\023\uffed\024\215\001\002\000" +
    "\004\023\uffee\001\002\000\052\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\020\ufff5\025\ufff5\030\ufff5\032\ufff5\042\ufff5\051\ufff5" +
    "\052\ufff5\053\ufff5\054\ufff5\057\ufff5\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\010\005\014\007\013\021\005\001\001\000\004" +
    "\014\207\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\202\007\203\021\005\024\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\202\007\203\021" +
    "\005\024\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\025\020" +
    "\022\001\001\000\002\001\001\000\004\021\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\030\001\001\000\010\007\032\010\031\021\005" +
    "\001\001\000\002\001\001\000\014\004\045\012\055\013" +
    "\052\017\041\023\056\001\001\000\010\007\034\021\005" +
    "\027\033\001\001\000\002\001\001\000\010\007\034\021" +
    "\005\027\035\001\001\000\002\001\001\000\004\017\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\123\001\001\000\002\001\001" +
    "\000\014\012\055\013\117\017\041\023\056\025\116\001" +
    "\001\000\004\017\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\115\001\001\000\004\017\114" +
    "\001\001\000\004\017\113\001\001\000\004\017\112\001" +
    "\001\000\004\017\111\001\001\000\004\017\110\001\001" +
    "\000\004\017\107\001\001\000\004\017\106\001\001\000" +
    "\004\017\105\001\001\000\004\017\104\001\001\000\004" +
    "\017\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\055\013\117\017\041\023\056\025\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\041" +
    "\023\130\001\001\000\002\001\001\000\004\017\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\135\001\001\000\002\001\001" +
    "\000\004\017\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\143\001\001\000\014\004\146\012\055" +
    "\013\052\017\041\023\056\001\001\000\002\001\001\000" +
    "\004\022\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\155\001\001" +
    "\000\004\031\156\001\001\000\002\001\001\000\004\017" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\172\001\001\000\004\020\173\001\001\000" +
    "\002\001\001\000\004\021\174\001\001\000\002\001\001" +
    "\000\004\030\176\001\001\000\002\001\001\000\014\004" +
    "\200\012\055\013\052\017\041\023\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\202\007\203\021" +
    "\005\024\205\001\001\000\012\003\202\007\203\021\005" +
    "\024\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\211\001\001" +
    "\000\004\015\215\001\001\000\004\017\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\217\001\001\000\004\015\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$YASPL3Cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$YASPL3Cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$YASPL3Cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 
	YASPL3Lex lexer;
	
	public YASPL3Cup(YASPL3Lex  lexer){
	    super(lexer); 
	    this.lexer = lexer;
    }
    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$YASPL3Cup$actions {
  private final YASPL3Cup parser;

  /** Constructor */
  CUP$YASPL3Cup$actions(YASPL3Cup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$YASPL3Cup$do_action_part00000000(
    int                        CUP$YASPL3Cup$act_num,
    java_cup.runtime.lr_parser CUP$YASPL3Cup$parser,
    java.util.Stack            CUP$YASPL3Cup$stack,
    int                        CUP$YASPL3Cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$YASPL3Cup$result;

      /* select the action based on the action number */
      switch (CUP$YASPL3Cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= HEAD Decls START Statements 
            {
              ScopeNode RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		OpNode decls = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		OpNode statements = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT= new ProgramOp("ProgramOp",decls,statements);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Programma",0, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		ScopeNode start_val = (ScopeNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		RESULT = start_val;
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$YASPL3Cup$parser.done_parsing();
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= Var_decl Decls_list 
            {
              OpNode RESULT =null;
		int vardeclleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int vardeclright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		OpNode vardecl = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node declList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 OpNode toReturn =new OpNode("DeclsVarOp",vardecl);
						if(declList!=null){
							for (Node node : ((OpNode) declList).nodeList()){
								toReturn.addNode(node);
							}
						}
						RESULT = toReturn; 
						 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Decls",3, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= Def_decl Decls_list 
            {
              OpNode RESULT =null;
		int defDeclleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int defDeclright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		ScopeNode defDecl = (ScopeNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node declList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 OpNode toReturn =new OpNode("DefDeclOp",defDecl);
								if(declList!=null){
									for (Node node : ((OpNode) declList).nodeList()){
										toReturn.addNode(node);
									}
								}
							RESULT = toReturn; 	
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Decls",3, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= 
            {
              OpNode RESULT =null;
		 RESULT = null; 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Decls",3, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decls_list ::= Var_decl Decls_list 
            {
              Node RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		OpNode varDecl = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node declList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 OpNode toReturn =new OpNode("Declslist",varDecl);
						if(declList!=null){
							for (Node node : ((OpNode) declList).nodeList()){
								toReturn.addNode(node);
							}
						}
						RESULT = toReturn; 
						 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Decls_list",18, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decls_list ::= Def_decl Decls_list 
            {
              Node RESULT =null;
		int defDeclleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int defDeclright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		ScopeNode defDecl = (ScopeNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node declList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 OpNode toReturn =new OpNode("Declslist",defDecl);
								if(declList!=null){
									for (Node node : ((OpNode) declList).nodeList()){
										toReturn.addNode(node);
									}
								}
							RESULT = toReturn; 	
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Decls_list",18, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decls_list ::= 
            {
              Node RESULT =null;
		 RESULT = null; 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Decls_list",18, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Statements ::= Stat Statements_list 
            {
              OpNode RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		Node stat = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int statementsListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int statementsListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node statementsList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		  OpNode toReturn =new OpNode("StatementsOp",stat);
						if(statementsList!=null){
							for(Node node :((OpNode) statementsList).nodeList()){
								toReturn.addNode(node);
							}
						}
						RESULT= toReturn;
					 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Statements ::= 
            {
              OpNode RESULT =null;
		 RESULT = null; 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statements_list ::= Stat Statements_list 
            {
              Node RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		Node stat = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int statementsListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int statementsListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node statementsList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		  OpNode toReturn =new OpNode("StatementsList",stat);
						if(statementsList!=null){
							for(Node node :((OpNode) statementsList).nodeList()){
								toReturn.addNode(node);
							}
						}
						RESULT= toReturn;
					 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Statements_list",19, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statements_list ::= 
            {
              Node RESULT =null;
		 RESULT = null; 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Statements_list",19, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Var_decl ::= Type Var_decls_init SEMI 
            {
              OpNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Leaf type = (Leaf)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int varDeclsInitleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int varDeclsInitright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		OpNode varDeclsInit = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		 RESULT=new VarDeclOp("VarDeclOp",type,varDeclsInit);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_decl",5, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= INT 
            {
              Leaf RESULT =null;
		RESULT= new Leaf("integer", null,"integer"); 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Type",15, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= BOOL 
            {
              Leaf RESULT =null;
		RESULT= new Leaf ("boolean", null,"boolean");
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Type",15, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= DOUBLE 
            {
              Leaf RESULT =null;
		RESULT= new Leaf ("double", null,"double");
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Type",15, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= STRING 
            {
              Leaf RESULT =null;
		RESULT= new Leaf ("string", null,"string");
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Type",15, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= CHAR 
            {
              Leaf RESULT =null;
		RESULT= new Leaf ("char", null,"char");
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Type",15, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Var_decls_init ::= ID Var_init_value Var_decls_init_list 
            {
              OpNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int varInitValueleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int varInitValueright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		OpNode varInitValue = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int varDecInListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int varDecInListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		OpNode varDecInList = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 OpNode toReturn= new VarInitOp("VarInitOp",new Leaf("ID",id,""),varInitValue); 
					if(varDecInList!=null){
						for(Node node:((OpNode) varDecInList).nodeList()){
							toReturn.addNode(node);
						}
					}
					
					RESULT = toReturn; 
					
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_decls_init",10, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Var_decls_init_list ::= COMMA ID Var_init_value Var_decls_init_list 
            {
              OpNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int varInitValueleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int varInitValueright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		OpNode varInitValue = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int varDecInListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int varDecInListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		OpNode varDecInList = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 OpNode toReturn= new VarInitOp("VarInitList",new Leaf("ID",id,""),varInitValue); 
						if(varDecInList!=null){
							for(Node node:((OpNode) varDecInList).nodeList()){
		  						toReturn.addNode(node);
							}
						}
					RESULT = toReturn;
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_decls_init_list",11, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Var_decls_init_list ::= 
            {
              OpNode RESULT =null;
		 RESULT= null;
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_decls_init_list",11, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Var_init_value ::= ASSIGN Expr 
            {
              OpNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		RESULT=new OpNode("InitializationOp",expr);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_init_value",12, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Var_init_value ::= 
            {
              OpNode RESULT =null;
		RESULT= null;
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_init_value",12, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Vars ::= ID Vars_List 
            {
              OpNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node varsList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		  OpNode toReturn= new OpNode("VarsOp",new Leaf("ID",id,"")); 
						if(varsList!=null){
							for(Node node: ((OpNode) varsList).nodeList()){
								toReturn.addNode(node);
							}
						
						}											
						RESULT=toReturn;
						
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Vars",8, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Vars_List ::= COMMA ID Vars_List 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node varList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		OpNode toReturn= new OpNode("VarsList",new Leaf("ID",id,""));
						if(varList!=null){
							for(Node node:((OpNode) varList).nodeList()){
								toReturn.addNode(node);
							}
						}		
						RESULT=toReturn; 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Vars_List",20, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Vars_List ::= 
            {
              Node RESULT =null;
		 RESULT=null; 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Vars_List",20, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Def_decl ::= DEF ID LPAR Par_decls RPAR Body 
            {
              ScopeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).value;
		int parDeclsleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int parDeclsright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		OpNode parDecls = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		OpNode body = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 
						RESULT= new ProcDeclOp("ProcDeclOp",new Leaf("ID",id,""),parDecls,body);
						
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Def_decl",1, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-5)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Def_decl ::= DEF ID LPAR RPAR Body 
            {
              ScopeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		OpNode body = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT= new ProcDeclOp("ProcDeclOp",new Leaf("ID",id,""),body);
						
						
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Def_decl",1, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Var_decls ::= Var_decl Var_decl_list 
            {
              OpNode RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		OpNode varDecl = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node varDeclList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		OpNode toReturn= new OpNode ("VarDeclsOp",varDecl);
						if(varDeclList!=null){
							for(Node node:((OpNode) varDeclList).nodeList()){
								toReturn.addNode(node);
								
							}
						}
						RESULT= toReturn;
						 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_decls",6, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Var_decls ::= 
            {
              OpNode RESULT =null;
		RESULT=null;
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_decls",6, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Var_decl_list ::= Var_decl Var_decl_list 
            {
              Node RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		OpNode varDecl = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node varDeclList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		OpNode toReturn= new OpNode ("VarDeclList",varDecl);
					  	if(varDeclList!=null){
							for(Node node:((OpNode) varDeclList).nodeList()){
									toReturn.addNode(node);
							}
						}
						RESULT= toReturn;
						 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_decl_list",21, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Var_decl_list ::= 
            {
              Node RESULT =null;
		RESULT=null;
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Var_decl_list",21, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Par_decls ::= Par_Type Type ID Par_decls_list 
            {
              OpNode RESULT =null;
		int parTypeleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int parTyperight = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		Leaf parType = (Leaf)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Leaf type = (Leaf)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int parDeclsListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int parDeclsListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node parDeclsList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 OpNode toReturn= new ParOp("ParOp",parType,type,new Leaf("ID",id,""));
						if(parDeclsList!=null){
							for(Node node: ((OpNode)parDeclsList).nodeList()){
								toReturn.addNode(node);
							}
					
						}
					
						RESULT=toReturn;
					
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Par_decls",7, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Par_decls_list ::= COMMA Par_Type Type ID Par_decls_list 
            {
              Node RESULT =null;
		int parTypeleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int parTyperight = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		Leaf parType = (Leaf)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Leaf type = (Leaf)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int parDeclsListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int parDeclsListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node parDeclsList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 OpNode toReturn= new ParOp("ParDeclsList",parType,type,new Leaf("ID",id,""));
						   if(parDeclsList!=null){
						   	for(Node node:((OpNode) parDeclsList).nodeList()){
						   		toReturn.addNode(node);
						   	}
						   
						   }
						   RESULT=toReturn;
						
						
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Par_decls_list",22, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Par_decls_list ::= 
            {
              Node RESULT =null;
		 RESULT=null; 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Par_decls_list",22, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Par_Type ::= IN 
            {
              Leaf RESULT =null;
		RESULT= new Leaf("in","in",null);  
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Par_Type",14, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Par_Type ::= OUT 
            {
              Leaf RESULT =null;
		RESULT= new Leaf("out","out",null);  
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Par_Type",14, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Par_Type ::= INOUT 
            {
              Leaf RESULT =null;
		RESULT= new Leaf("inout","inout", null);  
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Par_Type",14, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Body ::= LGPAR Var_decls Statements RGPAR 
            {
              OpNode RESULT =null;
		int varDeclsleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int varDeclsright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		OpNode varDecls = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		OpNode statements = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		RESULT= new OpNode("BodyOp",varDecls,statements);
						
						
						
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Body",4, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= Vars READ SEMI 
            {
              Node RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		OpNode vars = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		RESULT=new ReadOp("ReadOP",vars);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= Args WRITE SEMI 
            {
              Node RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		OpNode args = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		RESULT= new WriteOp("WriteOp",args); 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= ID ASSIGN Expr SEMI 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		RESULT= new AssignOp("AssignOp",new Leaf("ID",id,""),expr); 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= ID LPAR Args RPAR SEMI 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		OpNode args = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		RESULT= new CallOp("CallOp",new Leaf("ID",id,""),args); 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-4)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= ID LPAR RPAR SEMI 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		RESULT= new CallOp("CallOp",new Leaf("ID",id,"")); 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= IF LPAR Expr RPAR THEN Comp_stat ELSE Comp_stat 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-5)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-5)).value;
		int compStat1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int compStat1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node compStat1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int compStat2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int compStat2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node compStat2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		RESULT= new IfThenElseOp("IfThenElseOp",expr,compStat1,compStat2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-7)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= IF LPAR Expr RPAR THEN Comp_stat 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		int compStatleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int compStatright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node compStat = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		RESULT=new IfThenOp("IfThenOp",expr,compStat);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-5)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= WHILE LPAR Expr RPAR DO Comp_stat 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		int compStatleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int compStatright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node compStat = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		RESULT=new WhileOp("WhileOp",expr,compStat);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-5)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Args ::= Expr Args_list 
            {
              OpNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int argsListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int argsListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node argsList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		
							OpNode toReturn=new OpNode("ArgsOp",expr);
							if(argsList!=null){
								for(Node node :((OpNode)argsList).nodeList()){
									toReturn.addNode(node);
								
								}
							
							}
							RESULT=toReturn;
							
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Args",17, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Args_list ::= COMMA Expr Args_list 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		int argsListleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int argsListright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node argsList = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		
							
							 OpNode toReturn=new OpNode("argsList",expr);
							
							if(argsList!=null){
								for(Node node :((OpNode)argsList).nodeList()){
									toReturn.addNode(node);
								
								}
								
							}
							RESULT=toReturn;
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Args_list",23, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Args_list ::= 
            {
              Node RESULT =null;
		 
							RESULT=null; 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Args_list",23, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Comp_stat ::= LGPAR Statements RGPAR 
            {
              Node RESULT =null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		OpNode statements = (OpNode)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		RESULT=new OpNode("CompStatOp",statements);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Comp_stat",16, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr ::= Expr PLUS Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("AddOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr ::= Expr MINUS Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("DiffOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= Expr TIMES Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("MulOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= Expr DIV Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("DivOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= Expr AND Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("AndOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= Expr OR Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("OrOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= Expr GE Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("GeOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= Expr LT Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("LtOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= Expr LE Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("LeOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= Expr EQ Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("EqOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= Expr GT Expr 
            {
              Node RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).right;
		Node expr1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new MathOp("GtOp", expr1, expr2);
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= MINUS Expr 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		 RESULT = new SingleOp("UminusOp", expr); 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= NOT Expr 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		RESULT=new SingleOp("NotOp",expr);  
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= LPAR Expr RPAR 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-1)).value;
		RESULT=expr;  
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= TRUE 
            {
              Node RESULT =null;
		 RESULT= new Leaf("BOOL_CONST","true","boolean"); 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= FALSE 
            {
              Node RESULT =null;
		 RESULT= new Leaf("BOOL_CONST","false", "boolean"); 
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		RESULT=new Leaf("ID",id,""); 
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= INT_CONST 
            {
              Node RESULT =null;
		int intConstleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int intConstright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		String intConst = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		RESULT=new Leaf("INT_CONST",intConst,"integer"); 
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= DOUBLE_CONST 
            {
              Node RESULT =null;
		int doubleConstleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int doubleConstright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		String doubleConst = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		RESULT=new Leaf("DOUBLE_CONST",doubleConst,"double"); 
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= STRING_CONST 
            {
              Node RESULT =null;
		int stringConstleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int stringConstright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		String stringConst = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		
							 RESULT=new Leaf("STRING_CONST",stringConst,"string"); 
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= CHAR_CONST 
            {
              Node RESULT =null;
		int charConstleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).left;
		int charConstright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()).right;
		String charConst = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.peek()).value;
		RESULT=new Leaf("CHAR_CONST",charConst,"char"); 
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= ID LGPAR INT_CONST RGPAR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)).value;
		 RESULT=new Leaf("ID",id,"");
							
              CUP$YASPL3Cup$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.elementAt(CUP$YASPL3Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL3Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL3Cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$YASPL3Cup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$YASPL3Cup$do_action(
    int                        CUP$YASPL3Cup$act_num,
    java_cup.runtime.lr_parser CUP$YASPL3Cup$parser,
    java.util.Stack            CUP$YASPL3Cup$stack,
    int                        CUP$YASPL3Cup$top)
    throws java.lang.Exception
    {
              return CUP$YASPL3Cup$do_action_part00000000(
                               CUP$YASPL3Cup$act_num,
                               CUP$YASPL3Cup$parser,
                               CUP$YASPL3Cup$stack,
                               CUP$YASPL3Cup$top);
    }
}

}
